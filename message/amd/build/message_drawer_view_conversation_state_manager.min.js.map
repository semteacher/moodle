{"version":3,"sources":["../src/message_drawer_view_conversation_state_manager.js"],"names":["define","$","cloneState","state","extend","formatMessages","messages","loggedInUserId","members","map","message","fromLoggedInUser","useridfrom","id","userFrom","text","timeCreated","timecreated","parseInt","formatMembers","member","fullname","profileurl","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","canmessageevenifblocked","requirescontact","contactrequests","buildInitialState","midnight","messagePollMin","messagePollMax","messagePollAfterMax","name","subname","type","totalMemberCount","imageUrl","isFavourite","isMuted","canDeleteMessagesForAllUsers","deleteMessagesForAllUsers","hasTriedToLoadMessages","loadingMessages","loadingMembers","loadingConfirmAction","pendingBlockUserIds","pendingUnblockUserIds","pendingRemoveContactIds","pendingAddContactIds","pendingDeleteMessageIds","pendingSendMessageIds","pendingDeleteConversation","selectedMessageIds","addMessages","newState","formattedMessages","sendState","timeAdded","Date","now","errorMessage","allMessages","concat","sort","a","b","filter","index","sortedMessages","updateMessages","data","updatesById","reduce","carry","messageData","oldMessage","newMessage","formattedMessage","removeMessages","removeMessageIds","indexOf","removeMessagesById","messageIds","addMembers","formattedMembers","forEach","removeMembers","setLoadingMessages","value","setLoadingMembers","setId","setName","setSubname","setType","setIsFavourite","setIsMuted","setCanDeleteMessagesForAllUsers","setDeleteMessagesForAllUsers","setTotalMemberCount","count","setImageUrl","url","setLoadingConfirmAction","setPendingDeleteConversation","setMessagesSendPendingById","setMessagesSendSuccessById","setMessagesSendFailById","addPendingBlockUsersById","userIds","push","addPendingRemoveContactsById","addPendingUnblockUsersById","addPendingAddContactsById","addPendingDeleteMessagesById","removePendingBlockUsersById","removePendingRemoveContactsById","removePendingUnblockUsersById","removePendingAddContactsById","removePendingDeleteMessagesById","addSelectedMessagesById","removeSelectedMessagesById","markMessagesAsRead","readMessages","readMessageIds","isRead","addContactRequests","requests","request","fromUserId","userid","toUserId","requesteduserid","removeContactRequests","existing"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module operates on the view states from the message_drawer_view_conversation module.\n * It exposes functions that can be used to generate new version of the state.\n *\n * Important notes for this module:\n * 1.) The existing state is always immutable. It should never be modified.\n * 2.) All functions that operate on the state should always clone the state and\n *     modify the cloned state before returning it.\n *\n * It's important that the states remain immutable because they are diff'd in\n * the message_drawer_view_conversation_patcher module in order to work out what\n * has changed.\n *\n * @module     core_message/message_drawer_view_conversation_state_manager\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n\n    /**\n     * Clone a state, a state is a collection of information about the variables required to build\n     * the conversation user interface.\n     *\n     * @param  {Object} state State to clone\n     * @return {Object} newstate A copy of the state to clone.\n     */\n    var cloneState = function(state) {\n        // Do a deep extend to make sure we recursively copy objects and\n        // arrays so that the new state doesn't contain any references to\n        // the old state, e.g. adding a value to an array in the new state\n        // shouldn't also add it to the old state.\n        return $.extend(true, {}, state);\n    };\n\n    /**\n     * Format messages to be used in a state.\n     *\n     * @param  {Array} messages The messages to format.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Array} members The converstation members.\n     * @return {Array} Formatted messages.\n     */\n    var formatMessages = function(messages, loggedInUserId, members) {\n        return messages.map(function(message) {\n            var fromLoggedInUser = message.useridfrom == loggedInUserId;\n            return {\n                // Stringify the id.\n                id: \"\" + message.id,\n                fromLoggedInUser: fromLoggedInUser,\n                userFrom: members[message.useridfrom],\n                text: message.text,\n                timeCreated: message.timecreated ? parseInt(message.timecreated, 10) : null\n            };\n        });\n    };\n\n    /**\n     * Format members to be used in a state.\n     *\n     * @param  {Array} members The messages to format.\n     * @return {Array} Formatted members.\n     */\n    var formatMembers = function(members) {\n        return members.map(function(member) {\n            return {\n                id: member.id,\n                fullname: member.fullname,\n                profileurl: member.profileurl,\n                profileimageurl: member.profileimageurl,\n                profileimageurlsmall: member.profileimageurlsmall,\n                isonline:  member.isonline,\n                showonlinestatus: member.showonlinestatus,\n                isblocked: member.isblocked,\n                iscontact: member.iscontact,\n                isdeleted: member.isdeleted,\n                canmessage: member.canmessage,\n                canmessageevenifblocked: member.canmessageevenifblocked,\n                requirescontact: member.requirescontact,\n                contactrequests: member.contactrequests || []\n            };\n        });\n    };\n\n    /**\n     * Create an initial (blank) state.\n     *\n     * @param  {Number} midnight Midnight time.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Number} id The conversation id.\n     * @param  {Number} messagePollMin The message poll start timeout in seconds.\n     * @param  {Number} messagePollMax The message poll max timeout limit in seconds.\n     * @param  {Number} messagePollAfterMax The message poll frequency in seconds to reset to after max limit is reached.\n     * @return {Object} Initial state.\n     */\n    var buildInitialState = function(\n        midnight,\n        loggedInUserId,\n        id,\n        messagePollMin,\n        messagePollMax,\n        messagePollAfterMax\n    ) {\n        return {\n            midnight: midnight,\n            loggedInUserId: loggedInUserId,\n            id: id,\n            messagePollMin: messagePollMin,\n            messagePollMax: messagePollMax,\n            messagePollAfterMax: messagePollAfterMax,\n            name: null,\n            subname: null,\n            type: null,\n            totalMemberCount: null,\n            imageUrl: null,\n            isFavourite: null,\n            isMuted: null,\n            canDeleteMessagesForAllUsers: false,\n            deleteMessagesForAllUsers: false,\n            members: {},\n            messages: [],\n            hasTriedToLoadMessages: false,\n            loadingMessages: true,\n            loadingMembers: true,\n            loadingConfirmAction: false,\n            pendingBlockUserIds: [],\n            pendingUnblockUserIds: [],\n            pendingRemoveContactIds: [],\n            pendingAddContactIds: [],\n            pendingDeleteMessageIds: [],\n            pendingSendMessageIds: [],\n            pendingDeleteConversation: false,\n            selectedMessageIds: []\n        };\n    };\n\n    /**\n     * Add messages to a state and sort them by timecreated.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to add to state.\n     * @return {Object} state New state with added messages.\n     */\n    var addMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var formattedMessages = formatMessages(messages, state.loggedInUserId, state.members);\n        formattedMessages = formattedMessages.map(function(message) {\n            message.sendState = null;\n            message.timeAdded = Date.now();\n            message.errorMessage = null;\n            return message;\n        });\n        var allMessages = state.messages.concat(formattedMessages);\n        // Sort the messages. Oldest to newest.\n        allMessages.sort(function(a, b) {\n            if (a.timeCreated === null && b.timeCreated === null) {\n                if (a.timeAdded < b.timeAdded) {\n                    return -1;\n                } else if (a.timeAdded > b.timeAdded) {\n                    return 1;\n                }\n            }\n\n            if (a.timeCreated === null && b.timeCreated !== null) {\n                // A comes after b.\n                return 1;\n            } else if (a.timeCreated !== null && b.timeCreated === null) {\n                // A comes before b.\n                return -1;\n            } else if (a.timeCreated < b.timeCreated) {\n                // A comes before b.\n                return -1;\n            } else if (a.timeCreated > b.timeCreated) {\n                // A comes after b.\n                return 1;\n            } else if (a.id < b.id) {\n                return -1;\n            } else if (a.id > b.id) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Filter out any duplicate messages.\n        newState.messages = allMessages.filter(function(message, index, sortedMessages) {\n            return !index || message.id != sortedMessages[index - 1].id;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Update existing messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} data 2D array of old and new messages\n     * @return {Object} state.\n     */\n    var updateMessages = function(state, data) {\n        var newState = cloneState(state);\n        var updatesById = data.reduce(function(carry, messageData) {\n            var oldMessage = messageData[0];\n            var newMessage = messageData[1];\n            var formattedMessages = formatMessages([newMessage], state.loggedInUserId, state.members);\n            var formattedMessage = formattedMessages[0];\n\n            carry[oldMessage.id] = formattedMessage;\n            return carry;\n        }, {});\n\n        newState.messages = newState.messages.map(function(message) {\n            if (message.id in updatesById) {\n                return $.extend(message, updatesById[message.id]);\n            } else {\n                return message;\n            }\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var removeMessageIds = messages.map(function(message) {\n            return \"\" + message.id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return removeMessageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state by message id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return messageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Add conversation member to state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Conversation members to be added to state.\n     * @return {Object} New state with added members.\n     */\n    var addMembers = function(state, members) {\n        var newState = cloneState(state);\n        var formattedMembers = formatMembers(members);\n        formattedMembers.forEach(function(member) {\n            newState.members[member.id] = member;\n        });\n        return newState;\n    };\n\n    /**\n     * Remove members from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Members to be removed from state.\n     * @return {Object} New state with removed members.\n     */\n    var removeMembers = function(state, members) {\n        var newState = cloneState(state);\n        members.forEach(function(member) {\n            delete newState.members[member.id];\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state loading messages attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading messages value.\n     * @return {Object} New state with loading messages attribute.\n     */\n    var setLoadingMessages = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMessages = value;\n        if (state.loadingMessages && !value) {\n            // If we're going from loading to not loading then\n            // it means we've tried to load.\n            newState.hasTriedToLoadMessages = true;\n        }\n        return newState;\n    };\n\n    /**\n     * Set the state loading members attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading members value.\n     * @return {Object} New state with loading members attribute.\n     */\n    var setLoadingMembers = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMembers = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value The ID.\n     * @return {Object} New state.\n     */\n    var setId = function(state, value) {\n        var newState = cloneState(state);\n        newState.id = value;\n        return newState;\n    };\n\n    /**\n     * Set the state name attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New name value.\n     * @return {Object} New state with name attribute.\n     */\n    var setName = function(state, value) {\n        var newState = cloneState(state);\n        newState.name = value;\n        return newState;\n    };\n\n    /**\n     * Set the state subname attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New subname value.\n     * @return {Object} New state.\n     */\n    var setSubname = function(state, value) {\n        var newState = cloneState(state);\n        newState.subname = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation type.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Int} type Conversation type.\n     * @return {Object} New state.\n     */\n    var setType = function(state, type) {\n        var newState = cloneState(state);\n        newState.type = type;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a favourite conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} isFavourite If it's a favourite.\n     * @return {Object} New state.\n     */\n    var setIsFavourite = function(state, isFavourite) {\n        var newState = cloneState(state);\n        newState.isFavourite = isFavourite;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a muted conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {bool} isMuted If it's muted.\n     * @return {Object} New state.\n     */\n    var setIsMuted = function(state, isMuted) {\n        var newState = cloneState(state);\n        newState.isMuted = isMuted;\n        return newState;\n    };\n\n    /**\n     * Set the total member count.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} count The count.\n     * @return {Object} New state.\n     */\n    var setTotalMemberCount = function(state, count) {\n        var newState = cloneState(state);\n        newState.totalMemberCount = count;\n        return newState;\n    };\n\n    /**\n     * Set the conversation image url.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} url The url to the image.\n     * @return {Object} New state.\n     */\n    var setImageUrl = function(state, url) {\n        var newState = cloneState(state);\n        newState.imageUrl = url;\n        return newState;\n    };\n\n    /**\n     * Set the state loading confirm action attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading confirm action value.\n     * @return {Object} New state with loading confirm action attribute.\n     */\n    var setLoadingConfirmAction = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingConfirmAction = value;\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete conversation attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New pending delete conversation value.\n     * @return {Object} New state with pending delete conversation attribute.\n     */\n    var setPendingDeleteConversation = function(state, value) {\n        var newState = cloneState(state);\n        newState.pendingDeleteConversation = value;\n        return newState;\n    };\n\n    /**\n     * Set the state of message to pending.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendPendingById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'pending';\n                message.errorMessage = null;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state of message to sent.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendSuccessById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'sent';\n                message.errorMessage = null;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state of messages to error.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendFailById = function(state, messageIds, errorMessage) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'error';\n                message.errorMessage = errorMessage;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var addPendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingBlockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var addPendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingRemoveContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var addPendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingUnblockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending add users to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to add users to contacts.\n     * @return {Object} New state with array of pending add users to contacts userids.\n     */\n    var addPendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingAddContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var addPendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds.forEach(function(id) {\n            newState.pendingDeleteMessageIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var removePendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingBlockUserIds = newState.pendingBlockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var removePendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingRemoveContactIds = newState.pendingRemoveContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var removePendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingUnblockUserIds = newState.pendingUnblockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending add to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to add to contacts.\n     * @return {Object} New state with array of pending add to contacts userids.\n     */\n    var removePendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingAddContactIds = newState.pendingAddContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending delete messages userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from the list of messages to delete.\n     * @return {Object} New state with array of messages to delete.\n     */\n    var removePendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.pendingDeleteMessageIds = newState.pendingDeleteMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Add messages to state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages that are selected.\n     * @return {Object} New state with array of not blocked members.\n     */\n    var addSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.selectedMessageIds = newState.selectedMessageIds.concat(messageIds);\n        return newState;\n    };\n\n    /**\n     * Remove messages from the state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to remove from selected messages.\n     * @return {Object} New state with array of selected messages.\n     */\n    var removeSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.selectedMessageIds = newState.selectedMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Mark messages as read.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} readMessages Messages that are read.\n     * @return {Object} New state with array of messages that have the isread attribute set.\n     */\n    var markMessagesAsRead = function(state, readMessages) {\n        var newState = cloneState(state);\n        var readMessageIds = readMessages.map(function(message) {\n            return message.id;\n        });\n        newState.messages = newState.messages.map(function(message) {\n            if (readMessageIds.indexOf(message.id) >= 0) {\n                message.isRead = true;\n            }\n\n            return message;\n        });\n        return newState;\n    };\n\n    /**\n     * Add a contact request to each of the members that the request is for.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var addContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n            newState.members[fromUserId].contactrequests.push(request);\n            newState.members[toUserId].contactrequests.push(request);\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove a contact request from the members of that request.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var removeContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n\n            newState.members[fromUserId].contactrequests = newState.members[fromUserId].contactrequests.filter(function(existing) {\n                return existing.userid != fromUserId;\n            });\n            newState.members[toUserId].contactrequests = newState.members[toUserId].contactrequests.filter(function(existing) {\n                return existing.requesteduserid != toUserId;\n            });\n        });\n\n        return newState;\n    };\n\n    /**\n     * Set wheter the message of the conversation can delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value If it can delete for all users.\n     * @return {Object} New state.\n     */\n    var setCanDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.canDeleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    /**\n     * Set wheter the messages of the conversation delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value Delete messages for all users.\n     * @return {Object} New state.\n     */\n    var setDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.deleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    return {\n        buildInitialState: buildInitialState,\n        addMessages: addMessages,\n        updateMessages: updateMessages,\n        removeMessages: removeMessages,\n        removeMessagesById: removeMessagesById,\n        addMembers: addMembers,\n        removeMembers: removeMembers,\n        setLoadingMessages: setLoadingMessages,\n        setLoadingMembers: setLoadingMembers,\n        setId: setId,\n        setName: setName,\n        setSubname: setSubname,\n        setType: setType,\n        setIsFavourite: setIsFavourite,\n        setIsMuted: setIsMuted,\n        setCanDeleteMessagesForAllUsers: setCanDeleteMessagesForAllUsers,\n        setDeleteMessagesForAllUsers: setDeleteMessagesForAllUsers,\n        setTotalMemberCount: setTotalMemberCount,\n        setImageUrl: setImageUrl,\n        setLoadingConfirmAction: setLoadingConfirmAction,\n        setPendingDeleteConversation: setPendingDeleteConversation,\n        setMessagesSendPendingById: setMessagesSendPendingById,\n        setMessagesSendSuccessById: setMessagesSendSuccessById,\n        setMessagesSendFailById: setMessagesSendFailById,\n        addPendingBlockUsersById: addPendingBlockUsersById,\n        addPendingRemoveContactsById: addPendingRemoveContactsById,\n        addPendingUnblockUsersById: addPendingUnblockUsersById,\n        addPendingAddContactsById: addPendingAddContactsById,\n        addPendingDeleteMessagesById: addPendingDeleteMessagesById,\n        removePendingBlockUsersById: removePendingBlockUsersById,\n        removePendingRemoveContactsById: removePendingRemoveContactsById,\n        removePendingUnblockUsersById: removePendingUnblockUsersById,\n        removePendingAddContactsById: removePendingAddContactsById,\n        removePendingDeleteMessagesById: removePendingDeleteMessagesById,\n        addSelectedMessagesById: addSelectedMessagesById,\n        removeSelectedMessagesById: removeSelectedMessagesById,\n        markMessagesAsRead: markMessagesAsRead,\n        addContactRequests: addContactRequests,\n        removeContactRequests: removeContactRequests\n    };\n});\n"],"file":"message_drawer_view_conversation_state_manager.min.js"}